<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Send_Email extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Services_model');
        $this->load->model('User_model');
        $this->load->model('Invoice_model');
    } 

    /*
     * Listing of services
     */
    function index($id)
    {

        $data2['services'] = $this->Services_model->get_all_services2($id);
        $driver_id = $data2['services']['driver_id'];
        $data['user'] = $this->User_model->get_user($driver_id);
        $data['id'] = $id;
        // print_r($data['user']['email']);exit();

        $email = $data['user']['email'];
         $this->send_email($email,$data2); 
         redirect('Send_Email/index2');
    }
    function index2()
    {
        $data['services'] = $this->Services_model->get_all_services();
     // echo "<pre>";   print_r($data['services']); exit();
        
        $data['_view'] = 'services/index';
        $this->load->view('layouts/main',$data);
    }
    function results($id)
    {
        $data['services'] = $this->Services_model->get_all_services2($id);
     // echo "<pre>";   print_r($data['services']); exit();
        
        $data['_view'] = 'services/greeting_sign';
        $this->load->view('layouts/main',$data);
    }


    /*
     * Adding a new services
     */
    function add()
    {   
        $this->load->library('form_validation');

        $this->form_validation->set_rules('date_service','Service Date','required');
        $this->form_validation->set_rules('driver_id','Driver','required');
        $data['vehicle'] = $this->Services_model->get_all_vehicle();
        $data['driver'] = $this->User_model->get_all_driver();
        $data['service_type'] = $this->Services_model->get_all_service_type();
    
        
        if($this->form_validation->run())     
        {   
            $params = array(
                'date_service' => $this->input->post('date_service'),
                'time_service' => $this->input->post('time_service'),
                'vehicle_id' => $this->input->post('vehicle_id'),
                'driver_id' => $this->input->post('driver_id'),
                'driver_cell' => $this->input->post('driver_cell'),
                'service_type' => $this->input->post('service_type'),
                'pickup_location' => $this->input->post('pickup_location'),
                'destination' => $this->input->post('destination'),
                'ft_code' => $this->input->post('ft_code'),
                'pass_note' => $this->input->post('pass_note'),
                'client_name' => $this->input->post('client_name'),
                'client_cell' => $this->input->post('client_cell'),
                'created_by' => $this->session->userdata('first_name'),
            );

            $services_id = $this->Services_model->add_services($params);

            $num = array('service_id' => 'HZ000'.$services_id);
             $this->Services_model->update_services($services_id,$num);

             $total_income_from_price = $this->input->post('imponible');
             $cost = $this->input->post('costo');
             $UTILE = $total_income_from_price - $cost;
             $margin = ($total_income_from_price/$cost) * 100;
              $params2 = array(
                'services_id' => $services_id,
                'supplier' => $this->input->post('supplier'),
                'coder_client' => $this->input->post('coder_client'),
                'Faturazione' => $this->input->post('Faturazione'),
                'RIMBORSI' => $this->input->post('RIMBORSI'),
                'note_ft' => $this->input->post('note_ft'),
                'imponible' => $this->input->post('imponible'),
                'costo' => $this->input->post('costo'),
                'UTILE' => $UTILE,
                'margin' => $margin,
            );
              $invoice_id = $this->Invoice_model->add_invoice($params2);
               $num2 = array('invoice_id' => 'INV000'.$invoice_id);
             $this->Invoice_model->update_invoice($invoice_id,$num2);
             redirect('services/index');
        }
        else
        {            
            $data['_view'] = 'services/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a services
     */
    function edit($id)
    {   
        // check if the services exists before trying to edit it
        $data['services'] = $this->Services_model->get_services($id);
        
        if(isset($data['services']['id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('services','Test Identifiers','required');
        
            if($this->form_validation->run())     
            {   
                $params = array(
                'services' => $this->input->post('services'),
                'created_by' => $this->session->userdata('first_name'),
                );
              
                $this->Services_model->update_services($id,$params);            
                redirect('services/index');
            }
            else
            {
                $data['_view'] = 'services/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The services you are trying to edit does not exist.');
    } 



       function update_status($id)
    {   
        // check if the services exists before trying to edit it
        $data['services'] = $this->Services_model->get_services($id);
        
        if(isset($data['services']['id']))
        {
            $this->load->library('form_validation');
 
                $params = array(
                'picked_status' => $this->input->post('status'),
                'modified_by' => $this->session->userdata('first_name'),
                );
              
                $this->Services_model->update_services($id,$params);            
                redirect('services/index');

            }
        else
            show_error('The services you are trying to Update does not exist.');
    } 

    /*
     * Deleting services
     */
    function remove($id)
    {
        $services = $this->Services_model->get_services($id);

        // check if the services exists before trying to delete it
        if(isset($services['id']))
        {
            $this->Services_model->delete_services($id);
            redirect('services/index');
        }
        else
            show_error('The services you are trying to delete does not exist.');
    }

     function send_email($to, $status){
    $postData = $status;
     $data['services'] = $postData;
// echo "<pre>"; print_r($data['services']);exit();

        $from_email = "hungamabol69@gmail.com";
        $to_email = $to;
        $this->load->library('email');
        $this->email->from($from_email,'Horizon International Group.');
        $this->email->to($to_email);
        $this->email->subject('News from Horizon International Group');
       $msg = $this->load->view('email/index',$data,true);
        $this->email->set_header('MIME-Version','1.0;charset=utf-8');
        $this->email->set_header('Content-type','text/html');
       $this->email->message($msg);
        if($this->email->send()){
        }else{
            echo $this->email->print_debugger();
                
        }
    }

    
}
