<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Ordered_items extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Ordered_items_model');
        $this->load->model('Items_model');
    } 

    /*
     * Listing of ordered_items
     */
    function index()
    {
        $data['ordered_items'] = $this->Ordered_items_model->get_all_ordered_items2();
        
        $data['_view'] = 'ordered_items/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new ordered_items
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('name','Patient Name','required');
	
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'title' => $this->input->post('title'),
				'name' => $this->input->post('name'),
				'surname' => $this->input->post('surname'),
				'lab_sub_no' => $this->input->post('lab_sub_no'),
				'gender' => $this->input->post('gender'),
				'tel' => $this->input->post('tel'),
				'email' => $this->input->post('email'),
				'address' => $this->input->post('address'),
				'passport_no' => $this->input->post('passport_no'),
				'dob' => $this->input->post('dob'),
				'time_swab_taken' => $this->input->post('time_swab_taken'),
                'date_swab_taken' => $this->input->post('date_swab_taken'),
				'created_by' => $this->session->userdata('first_name'),
            );

            $ordered_items_id = $this->Ordered_items_model->add_ordered_items($params);
            redirect('ordered_items/index');
        }
        else
        {            
            $data['_view'] = 'ordered_items/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a ordered_items
     */
    function edit($id)
    {   
        // check if the ordered_items exists before trying to edit it
        $data['ordered_items'] = $this->Ordered_items_model->get_ordered_items($id);
        $data['items'] = $this->Items_model->get_all_items();
        
        if(isset($data['ordered_items']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('part_no','Part Number','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
				
				  'part_no' => $this->input->post('part_no'),
                'description' => $this->input->post('description'),
                'quantity' => $this->input->post('quantity'),
                'ppu' =>  $this->input->post('ppu'),
                'location' =>  $this->input->post('location'),
                );              
                $this->Ordered_items_model->update_ordered_items($id,$params);   
                redirect('ordered_items/index');
            }
            else
            {
                $data['_view'] = 'ordered_items/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The ordered_items you are trying to edit does not exist.');
    } 





      function assign($id)
    {   
        // check if the ordered_items exists before trying to edit it
        $data['assign'] = $this->Ordered_items_model->get_ordered_items($id);
         $data['test_identifiers'] = $this->Test_identifiers_model->get_all_test_identifiers2();

        
        if(isset($data['assign']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('name','Patient Name','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
				'lab_sub_no' => $this->input->post('lab_sub_no'),
				
                );
          $this->Ordered_items_model->update_ordered_items($id,$params); 
          $params2 = array(
				'assigned_status' => ASSIGNED,
				
                );  
                $test_identifiers_id = $this->input->post('lab_sub_no'); 
                $this->Test_identifiers_model->update_test_identifiers2($test_identifiers_id,$params2);redirect('ordered_items/index');
            }
            else
            {
                $data['_view'] = 'ordered_items/assign';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The ordered_items you are trying to edit does not exist.');
    } 

      function results($id)
    {   
        // check if the ordered_items exists before trying to edit it
        $data['ordered_items'] = $this->Ordered_items_model->get_ordered_items2($id);
        
        if(isset($data['ordered_items']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('name','Patient Name','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
				'title' => $this->input->post('title'),
				'name' => $this->input->post('name'),
				'surname' => $this->input->post('surname'),
				'lab_sub_no' => $this->input->post('lab_sub_no'),
				'gender' => $this->input->post('gender'),
				'tel' => $this->input->post('tel'),
				'email' => $this->input->post('email'),
				'address' => $this->input->post('address'),
				'passport_no' => $this->input->post('passport_no'),
				'dob' => $this->input->post('dob'),
				// 'relevant_info' => $this->input->post('relevant_info'),
				// 'case_define' => '',
				// 'specimen_info' => '',
				'created_by' => $this->session->userdata('first_name'),
                );
                 
              
                $this->Ordered_items_model->update_ordered_items($id,$params);            
                redirect('ordered_items/index');
            }
            else
            {
                $data['_view'] = 'ordered_items/results';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The ordered_items you are trying to edit does not exist.');
    } 



    /*
     * Deleting ordered_items
     */
    function remove($id)
    {
        $ordered_items = $this->Ordered_items_model->get_ordered_items($id);

        // check if the ordered_items exists before trying to delete it
        if(isset($ordered_items['id']))
        {
            $this->Ordered_items_model->delete_ordered_items($id);
            redirect('ordered_items/index');
        }
        else
            show_error('The ordered_items you are trying to delete does not exist.');
    }
    
}
